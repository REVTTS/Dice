/*!
Copyright (C) 2022 REVTTS, Ronald M Zielaznicki

This file is part of REVTTS Dice.

REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or any later version.

REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with REVTTS Dice.
If not, see <https://www.gnu.org/licenses/>. 
*/
!function(e,s){"object"==typeof exports&&"undefined"!=typeof module?module.exports=s(require("chevrotain")):"function"==typeof define&&define.amd?define(["chevrotain"],s):(e="undefined"!=typeof globalThis?globalThis:e||self).Dice=s(e.chevrotain)}(this,(function(e){"use strict";e.createToken({name:"bracket_angle_close",pattern:/>/}),e.createToken({name:"bracket_angle_open",pattern:/</}),e.createToken({name:"bracket_curley_close",pattern:/\}/}),e.createToken({name:"bracket_curley_open",pattern:/\{/});const s=e.createToken({name:"bracket_round_close",pattern:/\)/}),t=e.createToken({name:"bracket_round_open",pattern:/\(/});e.createToken({name:"bracket_square_close",pattern:/\]/}),e.createToken({name:"bracket_square_open",pattern:/\[/});const r=e.createToken({name:"abs",pattern:/abs/}),n=e.createToken({name:"ceil",pattern:/ceil/}),i=e.createToken({name:"d",pattern:/[dD]/}),o=e.createToken({name:"divide",pattern:/\//}),h=e.createToken({name:"dot",pattern:/\./}),a=e.createToken({name:"exponent",pattern:/\*\*/}),u=e.createToken({name:"floor",pattern:/floor/}),p=e.createToken({name:"modulus",pattern:/%/}),l=e.createToken({name:"minus",pattern:/-/}),L=e.createToken({name:"multiply",pattern:/\*/}),_=e.createToken({name:"plus",pattern:/\+/}),U=e.createToken({name:"round",pattern:/round/}),E=e.createToken({name:"number_zero",pattern:/0/}),x=e.createToken({name:"number_one",pattern:/1/}),c=e.createToken({name:"number_two",pattern:/2/}),m=e.createToken({name:"number_three",pattern:/3/}),v=e.createToken({name:"number_four",pattern:/4/}),b=e.createToken({name:"number_five",pattern:/5/}),B=e.createToken({name:"number_six",pattern:/6/}),R=e.createToken({name:"number_seven",pattern:/7/}),S=e.createToken({name:"number_eight",pattern:/8/}),T=e.createToken({name:"number_nine",pattern:/9/});e.createToken({name:"whitespace",pattern:/\s/});const A=e.createToken({group:e.Lexer.SKIPPED,name:"whitespace",pattern:/\s/}),d={modes:{dice_mode:[s,t,r,n,i,o,h,a,u,l,p,L,_,U,E,x,c,m,v,b,B,R,S,T,A]},defaultMode:"dice_mode"};var w=new e.Lexer(d);class Parser extends e.CstParser{constructor(e){super(e),this.RULE("expressions",(()=>{this.MANY((()=>{this.SUBRULE(this.expression,{LABEL:"expressions"})}))})),this.RULE("expression",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.whole_number_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.real_number_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.absolute_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.ceil_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.floor_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.round_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.die_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.exponential_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.multiply_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.divide_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.modulus_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.addition_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.minus_expression,{LABEL:"expression"})}])})),this.RULE("absolute_expression",(()=>{this.CONSUME(r),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("addition_expression",(()=>{this.CONSUME(_),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("ceil_expression",(()=>{this.CONSUME(n),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("die_expression",(()=>{this.CONSUME(i),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("divide_expression",(()=>{this.CONSUME(o),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("exponential_expression",(()=>{this.CONSUME(a),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("floor_expression",(()=>{this.CONSUME(u),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("minus_expression",(()=>{this.CONSUME(l),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("modulus_expression",(()=>{this.CONSUME(p),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("multiply_expression",(()=>{this.CONSUME(L),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("parenthesis_expression",(()=>{this.CONSUME(t),this.SUBRULE(this.expressions,{LABEL:"expression"}),this.CONSUME(s)})),this.RULE("real_number_expression",(()=>{this.CONSUME(h),this.SUBRULE(this.expression,{LABEL:"expression"})})),this.RULE("round_expression",(()=>{this.CONSUME(U),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("whole_number_expression",(()=>{this.AT_LEAST_ONE((()=>{this.SUBRULE(this.whole_number)}))})),this.RULE("whole_number",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.whole_number_zero)},{ALT:()=>this.SUBRULE(this.whole_number_one)},{ALT:()=>this.SUBRULE(this.whole_number_two)},{ALT:()=>this.SUBRULE(this.whole_number_three)},{ALT:()=>this.SUBRULE(this.whole_number_four)},{ALT:()=>this.SUBRULE(this.whole_number_five)},{ALT:()=>this.SUBRULE(this.whole_number_six)},{ALT:()=>this.SUBRULE(this.whole_number_seven)},{ALT:()=>this.SUBRULE(this.whole_number_eight)},{ALT:()=>this.SUBRULE(this.whole_number_nine)}])})),this.RULE("whole_number_zero",(()=>{this.CONSUME(E)})),this.RULE("whole_number_one",(()=>{this.CONSUME(x)})),this.RULE("whole_number_two",(()=>{this.CONSUME(c)})),this.RULE("whole_number_three",(()=>{this.CONSUME(m)})),this.RULE("whole_number_four",(()=>{this.CONSUME(v)})),this.RULE("whole_number_five",(()=>{this.CONSUME(b)})),this.RULE("whole_number_six",(()=>{this.CONSUME(B)})),this.RULE("whole_number_seven",(()=>{this.CONSUME(R)})),this.RULE("whole_number_eight",(()=>{this.CONSUME(S)})),this.RULE("whole_number_nine",(()=>{this.CONSUME(T)})),this.performSelfAnalysis()}}const k=()=>new Parser([s,t,r,n,i,o,h,a,u,l,p,L,_,U,E,x,c,m,v,b,B,R,S,T]);const f=k().getBaseCstVisitorConstructorWithDefaults();class Interpreter extends f{constructor(e){super(),this.prng=e,this.validateVisitor()}expressions(e){let s={value:0};if(e.expressions){for(let t of e.expressions)s=this.visit(t,s);return s}return s}expression(e,s){return this.visit(e.expression,s)}absolute_expression(e){const s=this.visit(e.expression);return{value:Math.abs(s.value)}}addition_expression(e,s){const t=this.visit(e.expression);return s?{value:s.value+t.value}:{value:t.value}}ceil_expression(e){const s=this.visit(e.expression);return{value:Math.ceil(s.value)}}die_expression(e,s){const t=this.visit(e.expression);let r=0;for(let e=0;e<s.value;e++)r+=Math.floor(this.prng()*t.value)+1;return{value:r}}divide_expression(e,s){const t=this.visit(e.expression);return{value:s.value/t.value}}exponential_expression(e,s){const t=this.visit(e.expression);return{value:s.value**t.value}}floor_expression(e){const s=this.visit(e.expression);return{value:Math.floor(s.value)}}minus_expression(e,s){const t=this.visit(e.expression);return s?{value:s.value-t.value}:{value:-t.value}}modulus_expression(e,s){const t=this.visit(e.expression);return{value:s.value%t.value}}multiply_expression(e,s){const t=this.visit(e.expression);return{value:s.value*t.value}}parenthesis_expression(e){return{value:this.visit(e.expression).value}}real_number_expression(e,s){const t=this.visit(e.expression),r=Math.ceil(Math.log10(t.value+1)),n=t.value/10*r;return s?{value:s.value+n}:{value:n}}round_expression(e){const s=this.visit(e.expression);return{value:Math.round(s.value)}}whole_number_expression(e){let s=0;for(let t of e.whole_number)s=10*s+this.visit(t).value;return{value:s}}whole_number(e){const s=Object.keys(e)[0];return this.visit(e[s])}whole_number_zero(){return{value:0}}whole_number_one(){return{value:1}}whole_number_two(){return{value:2}}whole_number_three(){return{value:3}}whole_number_four(){return{value:4}}whole_number_five(){return{value:5}}whole_number_six(){return{value:6}}whole_number_seven(){return{value:7}}whole_number_eight(){return{value:8}}whole_number_nine(){return{value:9}}}new Interpreter(Math.random);return class Dice{constructor(){this.parser=k()}roll(e,{prng:s}={}){const t=w.tokenize(e);if(t.errors.length>0){const s=t.errors[0].offset;throw new Error(`Unexpected character "${e.charAt(s)}" at position: ${s}`)}s||(s=Math.random),this.parser.input=t.tokens;const r=this.parser.expressions();return new Interpreter(s).visit(r)}}}));
//# sourceMappingURL=Dice.umd.js.map
