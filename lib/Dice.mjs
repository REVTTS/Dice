/*!
Copyright (C) 2022 REVTTS, Ronald M Zielaznicki

This file is part of REVTTS Dice.

REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or any later version.

REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with REVTTS Dice.
If not, see <https://www.gnu.org/licenses/>. 
*/
import{createToken as e,Lexer as t,CstParser as s}from"chevrotain";e({name:"bracket_angle_close",pattern:/>/}),e({name:"bracket_angle_open",pattern:/</});const r=e({name:"bracket_curley_close",pattern:/\}/}),i=e({name:"bracket_curley_open",pattern:/\{/}),n=e({name:"bracket_round_close",pattern:/\)/}),o=e({name:"bracket_round_open",pattern:/\(/});e({name:"bracket_square_close",pattern:/\]/}),e({name:"bracket_square_open",pattern:/\[/});const h=e({name:"abs",pattern:/abs/}),a=e({name:"ceil",pattern:/ceil/}),_=e({name:"d",pattern:/[dD]/}),u=e({name:"alt_die",pattern:/.die/}),p=e({name:"divide",pattern:/\//}),L=e({name:"dot",pattern:/\./}),l=e({name:"exponent",pattern:/\*\*/}),m=e({name:"floor",pattern:/floor/}),E=e({name:"modulus",pattern:/%/}),U=e({name:"minus",pattern:/-/}),b=e({name:"multiply",pattern:/\*/}),d=e({name:"plus",pattern:/\+/}),x=e({name:"round",pattern:/round/});var c=Object.freeze({__proto__:null,token_operator_absolute:h,token_operator_ceil:a,token_operator_die:_,token_operator_alt_die:u,token_operator_divide:p,token_operator_dot:L,token_operator_exponent:l,token_operator_floor:m,token_operator_modulus:E,token_operator_minus:U,token_operator_multiply:b,token_operator_plus:d,token_operator_round:x});const B=e({name:"string",pattern:/[a-zA-Z]+/}),A=e({name:"number_zero",pattern:/0/}),R=e({name:"number_one",pattern:/1/}),S=e({name:"number_two",pattern:/2/}),f=e({name:"number_three",pattern:/3/}),v=e({name:"number_four",pattern:/4/}),w=e({name:"number_five",pattern:/5/}),M=e({name:"number_six",pattern:/6/}),g=e({name:"number_seven",pattern:/7/}),O=e({name:"number_eight",pattern:/8/}),N=e({name:"number_nine",pattern:/9/});var k=Object.freeze({__proto__:null,token_number_zero:A,token_number_one:R,token_number_two:S,token_number_three:f,token_number_four:v,token_number_five:w,token_number_six:M,token_number_seven:g,token_number_eight:O,token_number_nine:N});e({name:"whitespace",pattern:/\s/});const C=e({group:t.SKIPPED,name:"whitespace",pattern:/\s/});var T=new t([i,r,n,o,...Object.values(c),...Object.values(k),C,B]);class Parser extends s{constructor(e){super(e),this.RULE("expression",(()=>{this.SUBRULE(this.minus_expression,{LABEL:"expression"})})),this.RULE("absolute_expression",(()=>{this.CONSUME(h,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("addition_expression",(()=>{this.SUBRULE(this.modulus_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(d,{LABEL:"operator"}),this.SUBRULE2(this.modulus_expression,{LABEL:"right_hand"})}))})),this.RULE("atomic_expression",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.absolute_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.ceil_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.floor_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.negative_number_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.round_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.variable_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.whole_number_expression,{LABEL:"expression"})}])})),this.RULE("ceil_expression",(()=>{this.CONSUME(a,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("die_expression",(()=>{this.SUBRULE(this.real_number_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.OR([{ALT:()=>{this.CONSUME(_,{LABEL:"operator"}),this.SUBRULE2(this.real_number_expression,{LABEL:"right_hand"})}},{ALT:()=>{this.CONSUME(u,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"right_hand"})}}])}))})),this.RULE("divide_expression",(()=>{this.SUBRULE(this.multiply_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(p,{LABEL:"operator"}),this.SUBRULE2(this.multiply_expression,{LABEL:"right_hand"})}))})),this.RULE("exponential_expression",(()=>{this.SUBRULE(this.die_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(l,{LABEL:"operator"}),this.SUBRULE2(this.die_expression,{LABEL:"right_hand"})}))})),this.RULE("floor_expression",(()=>{this.CONSUME(m,{LABEL:"operator"}),this.SUBRULE2(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("minus_expression",(()=>{this.SUBRULE(this.addition_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(U,{LABEL:"operator"}),this.SUBRULE2(this.addition_expression,{LABEL:"right_hand"})}))})),this.RULE("modulus_expression",(()=>{this.SUBRULE(this.divide_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(E,{LABEL:"operator"}),this.SUBRULE2(this.divide_expression,{LABEL:"right_hand"})}))})),this.RULE("multiply_expression",(()=>{this.SUBRULE(this.exponential_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(b,{LABEL:"operator"}),this.SUBRULE2(this.exponential_expression,{LABEL:"right_hand"})}))})),this.RULE("negative_number_expression",(()=>{this.CONSUME(U),this.SUBRULE(this.expression)})),this.RULE("parenthesis_expression",(()=>{this.CONSUME(o),this.SUBRULE(this.expression,{LABEL:"expression"}),this.CONSUME(n)})),this.RULE("real_number_expression",(()=>{this.OR([{ALT:()=>{this.SUBRULE(this.atomic_expression,{LABEL:"left_hand"}),this.OPTION((()=>{this.CONSUME(L,{LABEL:"operator"}),this.SUBRULE2(this.atomic_expression,{LABEL:"right_hand"})}))}},{ALT:()=>{this.CONSUME2(L,{LABEL:"operator"}),this.SUBRULE3(this.atomic_expression,{LABEL:"right_hand"})}}])})),this.RULE("round_expression",(()=>{this.CONSUME(x,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("whole_number_expression",(()=>{this.AT_LEAST_ONE((()=>{this.SUBRULE(this.whole_number)}))})),this.RULE("whole_number",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.whole_number_zero)},{ALT:()=>this.SUBRULE(this.whole_number_one)},{ALT:()=>this.SUBRULE(this.whole_number_two)},{ALT:()=>this.SUBRULE(this.whole_number_three)},{ALT:()=>this.SUBRULE(this.whole_number_four)},{ALT:()=>this.SUBRULE(this.whole_number_five)},{ALT:()=>this.SUBRULE(this.whole_number_six)},{ALT:()=>this.SUBRULE(this.whole_number_seven)},{ALT:()=>this.SUBRULE(this.whole_number_eight)},{ALT:()=>this.SUBRULE(this.whole_number_nine)}])})),this.RULE("whole_number_zero",(()=>{this.CONSUME(A)})),this.RULE("whole_number_one",(()=>{this.CONSUME(R)})),this.RULE("whole_number_two",(()=>{this.CONSUME(S)})),this.RULE("whole_number_three",(()=>{this.CONSUME(f)})),this.RULE("whole_number_four",(()=>{this.CONSUME(v)})),this.RULE("whole_number_five",(()=>{this.CONSUME(w)})),this.RULE("whole_number_six",(()=>{this.CONSUME(M)})),this.RULE("whole_number_seven",(()=>{this.CONSUME(g)})),this.RULE("whole_number_eight",(()=>{this.CONSUME(O)})),this.RULE("whole_number_nine",(()=>{this.CONSUME(N)})),this.RULE("variable_expression",(()=>{this.CONSUME(i),this.CONSUME(B),this.CONSUME(r)})),this.performSelfAnalysis()}}const $=()=>new Parser([i,r,n,o,...Object.values(c),...Object.values(k),B]);const y=$().getBaseCstVisitorConstructorWithDefaults(),z=(e,t)=>{const s=e.shift(),r=e.shift(),i=Array.from(Array(Math.max(s.length,r.length)),((e,i)=>{const n=s[i]||s[s.length-1],o=r[i]||r[r.length-1];return`${n}${t}${o}`}));return e.length>0?z([i,...e],t):i};function j(e,t,s,r,i){const n=r(e.expression,i),o=s(Y(n.values));return{outputs:[...n.outputs.map((e=>t(e))),i.formatter.format_result(`${o}`)],values:[o]}}const Y=e=>e.reduce(((e,t)=>e+t)),D=e=>e.reduce(((e,t)=>e/t)),I=e=>e.reduce(((e,t)=>e**t)),P=e=>e.reduce(((e,t)=>e-t)),q=e=>e.reduce(((e,t)=>e%t)),F=e=>e.reduce(((e,t)=>e*t));function V(e,t,s,r,i){let n=r(e.left_hand,i);if(e.right_hand){const o=e.right_hand.map((e=>r(e,i))),h=o.map((e=>e.outputs)),a=o.map((e=>Y(e.values))),_=s([Y(n.values),...a]);return{outputs:[...z([n.outputs,...h],t),i.formatter.format_result(`${_}`)],values:[_]}}return n}class Interpreter extends y{constructor(){super(),this.validateVisitor()}expression(e,t){return this.visit(e.expression,t)}absolute_expression(e,t){return j(e,(e=>`abs(${e})`),Math.abs,this.visit.bind(this),t)}addition_expression(e,t){return V(e,"+",Y,this.visit.bind(this),t)}atomic_expression(e,t){return this.visit(e.expression,t)}ceil_expression(e,t){return j(e,(e=>`ceil(${e})`),Math.ceil,this.visit.bind(this),t)}die_expression(e,t){const s=this.visit(e.left_hand,t);if(e.right_hand){const r=e.right_hand.map((e=>this.visit(e,t))),i=r.map((e=>e.outputs)),n=r.map((e=>Y(e.values))).reduce(((e,s)=>{let r=Y(e);const i=Math.sign(r)*Math.sign(s);if(0===i)return[0];const n=[];r=Math.abs(r);for(let e=0;e<r;e++)n.push(i*Math.floor(t.prng()*Math.abs(s)+.9999));return n}),s.values);return 0===n.length&&n.push(0),{outputs:[...z([s.outputs,...i],"d"),n.map((e=>t.formatter.format_dice_result(e))).join(", ")],values:n}}return s}divide_expression(e,t){return V(e,"/",D,this.visit.bind(this),t)}exponential_expression(e,t){return V(e,"**",I,this.visit.bind(this),t)}floor_expression(e,t){return j(e,(e=>`floor(${e})`),Math.floor,this.visit.bind(this),t)}minus_expression(e,t){return V(e,"-",P,this.visit.bind(this),t)}modulus_expression(e,t){return V(e,"%",q,this.visit.bind(this),t)}multiply_expression(e,t){return V(e,"*",F,this.visit.bind(this),t)}negative_number_expression(e,t){return j(e,(e=>`-${e}`),(e=>-e),this.visit.bind(this),t)}parenthesis_expression(e,t){return this.visit(e.expression,t)}real_number_expression(e,t){if(e.right_hand){const s=this.visit(e.right_hand,t),r=s.values.length,i=Y(s.values)/10**r;if(e.left_hand){const r=this.visit(e.left_hand,t),n=Y(r.values)+i;return{outputs:[...z([r.outputs,s.outputs],"."),t.formatter.format_result(`${n}`)],values:[n]}}return{outputs:[...s.outputs.map((e=>`.${e}`)),t.formatter.format_result(`${i}`)],values:[i]}}return this.visit(e.left_hand,t)}round_expression(e,t){return j(e,(e=>`round(${e})`),Math.round,this.visit.bind(this),t)}whole_number_expression(e){let t=[];const s=e.whole_number.length;for(let r in e.whole_number)t.push(this.visit(e.whole_number[r])*10**(s-1-r));return{outputs:[`${Y(t)}`],values:t}}whole_number(e){const t=Object.keys(e)[0];return this.visit(e[t])}whole_number_zero(){return 0}whole_number_one(){return 1}whole_number_two(){return 2}whole_number_three(){return 3}whole_number_four(){return 4}whole_number_five(){return 5}whole_number_six(){return 6}whole_number_seven(){return 7}whole_number_eight(){return 8}whole_number_nine(){return 9}variable_expression(e,t){const s=t.variables.get(e.string[0].image)||0;return{outputs:[`${s}`],values:[s]}}}new Interpreter(Math.random);class Formatter{constructor(){}format_dice_result(e){return this.format_result(e)}format_result(e){return e}}class Dice{constructor(){this.interpreter=new Interpreter,this.parser=$()}roll(e,{formatter:t,prng:s,variables:r}={}){const i=T.tokenize(e);if(i.errors.length>0){const t=i.errors[0].offset;throw new Error(`Unexpected character "${e.charAt(t)}" at position: ${t}`)}t||(t=new Formatter),s||(s=Math.random),r||(r=[]);const n=new Map;r.forEach((e=>{n.set(e[0].toLowerCase(),e[1])})),this.parser.input=i.tokens;const o=this.parser.expression();if(this.parser.errors.length>0)throw new Error(this.parser.errors[0]);return this.interpreter.visit(o,{formatter:t,prng:s,variables:n})}}export{Dice as default};
//# sourceMappingURL=Dice.mjs.map
