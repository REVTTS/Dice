{"version":3,"file":"Dice.umd.js","sources":["../src/tokens/brackets.js","../src/tokens/operators.js","../src/tokens/string.js","../src/tokens/numbers.js","../src/tokens/whitespace.js","../src/lexer.js","../src/parser.js","../src/interpreter.js","../src/Dice.js"],"sourcesContent":["/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\n// Angle Brackets\nexport const token_bracket_angle_close = createToken({\n  name: 'bracket_angle_close',\n  pattern: />/,\n});\n\nexport const token_bracket_angle_open = createToken({\n  name: 'bracket_angle_open',\n  pattern: /</,\n});\n\n\n// Curley Brackets\nexport const token_bracket_curley_close = createToken({\n  name: 'bracket_curley_close',\n  pattern: /\\}/,\n});\n\nexport const token_bracket_curley_open = createToken({\n  name: 'bracket_curley_open',\n  pattern: /\\{/,\n});\n\n\n// Round Brackets, aka parenthesis\nexport const token_bracket_round_close = createToken({\n  name: 'bracket_round_close',\n  pattern: /\\)/,\n});\n\nexport const token_bracket_round_open = createToken({\n  name: 'bracket_round_open',\n  pattern: /\\(/,\n});\n\n\n// Square Brackets\nexport const token_bracket_square_close = createToken({\n  name: 'bracket_square_close',\n  pattern: /\\]/,\n});\n\nexport const token_bracket_square_open = createToken({\n  name: 'bracket_square_open',\n  pattern: /\\[/,\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\nexport const token_operator_absolute = createToken({\n  name: 'abs',\n  pattern: /abs/,\n});\n\nexport const token_operator_ceil = createToken({\n  name: 'ceil',\n  pattern: /ceil/,\n});\n\nexport const token_operator_dice = createToken({\n  name: 'd',\n  pattern: /[dD]/,\n});\n\nexport const token_operator_divide = createToken({\n  name: 'divide',\n  pattern: /\\//,\n});\n\nexport const token_operator_dot = createToken({\n  name: 'dot',\n  pattern: /\\./,\n});\n\nexport const token_operator_exponent = createToken({\n  name: 'exponent',\n  pattern: /\\*\\*/,\n});\n\nexport const token_operator_floor = createToken({\n  name: 'floor',\n  pattern: /floor/,\n});\n\nexport const token_operator_modulus = createToken({\n  name: 'modulus',\n  pattern: /%/,\n});\n\nexport const token_operator_minus = createToken({\n  name: 'minus',\n  pattern: /-/,\n});\n\nexport const token_operator_multiply = createToken({\n  name: 'multiply',\n  pattern: /\\*/,\n});\n\nexport const token_operator_plus = createToken({\n  name: 'plus',\n  pattern: /\\+/,\n});\n\nexport const token_operator_round = createToken({\n  name: 'round',\n  pattern: /round/,\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\nexport const token_string = createToken({\n  name: 'string',\n  pattern: /[a-zA-Z]+/,\n});","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\nexport const token_number_zero = createToken({\n  name: 'number_zero',\n  pattern: /0/,\n});\n\nexport const token_number_one = createToken({\n  name: 'number_one',\n  pattern: /1/,\n});\n\nexport const token_number_two = createToken({\n  name: 'number_two',\n  pattern: /2/,\n});\n\nexport const token_number_three = createToken({\n  name: 'number_three',\n  pattern: /3/,\n});\n\nexport const token_number_four = createToken({\n  name: 'number_four',\n  pattern: /4/,\n});\n\nexport const token_number_five = createToken({\n  name: 'number_five',\n  pattern: /5/,\n});\n\nexport const token_number_six = createToken({\n  name: 'number_six',\n  pattern: /6/,\n});\n\nexport const token_number_seven = createToken({\n  name: 'number_seven',\n  pattern: /7/,\n});\n\nexport const token_number_eight = createToken({\n  name: 'number_eight',\n  pattern: /8/,\n});\n\nexport const token_number_nine = createToken({\n  name: 'number_nine',\n  pattern: /9/,\n});","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken, Lexer } from 'chevrotain';\n\nexport const token_whitespace = createToken({\n  name: 'whitespace',\n  pattern: /\\s/,\n});\n\nexport const token_whitespace_skip = createToken({\n  group: Lexer.SKIPPED,\n  name: 'whitespace',\n  pattern: /\\s/\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Lexer } from 'chevrotain';\n\nimport {\n  token_bracket_curley_open,\n  token_bracket_curley_close,\n  token_bracket_round_close,\n  token_bracket_round_open,\n} from './tokens/brackets.js';\nimport * as operator_tokens from './tokens/operators.js';\nimport { token_string } from './tokens/string.js';\nimport * as number_tokens from './tokens/numbers.js';\n\n\nimport { token_whitespace_skip } from './tokens/whitespace.js';\n\nconst tokens = [\n  token_bracket_curley_open,\n  token_bracket_curley_close,\n  token_bracket_round_close,\n  token_bracket_round_open,\n  ...Object.values(operator_tokens),\n  ...Object.values(number_tokens),\n  token_whitespace_skip,\n  token_string,\n];\n\nexport default new Lexer(tokens);","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { CstParser } from 'chevrotain';\n\nimport {\n  token_bracket_curley_open,\n  token_bracket_curley_close,\n  token_bracket_round_close,\n  token_bracket_round_open\n} from './tokens/brackets.js';\nimport * as operator_tokens from './tokens/operators.js';\nimport { token_string } from './tokens/string.js';\nimport * as number_tokens from './tokens/numbers.js';\n\nexport class Parser extends CstParser {\n  constructor(tokens) {\n    super(tokens);\n\n    // Ordered by operation. The higher it is, the more precedence.\n    this.RULE('expression', () => {\n      this.SUBRULE(this.minus_expression, { LABEL: 'expression'});\n    });\n\n    // While the above is ordered by order of operations, the below is\n    // ordered alphabetically.\n    this.RULE('absolute_expression', () => {\n      this.CONSUME(operator_tokens.token_operator_absolute);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('addition_expression', () => {\n      this.SUBRULE(this.modulus_expression, { LABEL: 'left_hand' });\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_plus);\n        this.SUBRULE2(this.modulus_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    // Atomic might not be the right name here.\n    // Need to do some reading\n    this.RULE('atomic_expression', () => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.absolute_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.ceil_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.floor_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.negative_number_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.round_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.variable_expression, { LABEL: 'expression' }) },\n        { ALT: () => this.SUBRULE(this.whole_number_expression, { LABEL: 'expression' }) },\n      ]);\n    });\n\n    this.RULE('ceil_expression', () => {\n      this.CONSUME(operator_tokens.token_operator_ceil);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('die_expression', () => {\n      this.SUBRULE(this.dot_expression, { LABEL: 'left_hand' });\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_dice);\n        this.SUBRULE2(this.dot_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('divide_expression', () => {\n      this.SUBRULE(this.multiply_expression, { LABEL: 'left_hand' });\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_divide);\n        this.SUBRULE2(this.multiply_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('dot_expression', () => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.real_number_expression, { LABEL: 'expression' }) },\n      ]);\n    });\n\n    this.RULE('exponential_expression', () => {\n      this.SUBRULE(this.die_expression, { LABEL: 'left_hand' });\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_exponent);\n        this.SUBRULE2(this.die_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('floor_expression', () => {\n      this.CONSUME(operator_tokens.token_operator_floor);\n      this.SUBRULE2(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('minus_expression', () => {\n      this.SUBRULE(this.addition_expression, { LABEL: 'left_hand'});\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_minus);\n        this.SUBRULE2(this.addition_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('modulus_expression', () => {\n      this.SUBRULE(this.divide_expression, { LABEL: 'left_hand'});\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_modulus);\n        this.SUBRULE2(this.divide_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('multiply_expression', () => {\n      this.SUBRULE(this.exponential_expression, { LABEL: 'left_hand' });\n      this.MANY(() => {\n        this.CONSUME(operator_tokens.token_operator_multiply);\n        this.SUBRULE2(this.exponential_expression, { LABEL: 'right_hand' });\n      });\n    });\n\n    this.RULE('negative_number_expression', () => {\n      this.CONSUME(operator_tokens.token_operator_minus);\n      this.SUBRULE(this.expression);\n    });\n\n    this.RULE('parenthesis_expression', () => {\n      this.CONSUME(token_bracket_round_open);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n      this.CONSUME(token_bracket_round_close);\n    });\n\n    this.RULE('real_number_expression', () => {\n      this.OR([\n        {\n          ALT: () => {\n            this.SUBRULE(this.atomic_expression, { LABEL: 'left_hand'});\n            // Real number with a leading expression.\n            // ie. \"1.05\"\n            // Unlike most other expressions, this is not a MANY.\n            // 1.05.05 doesn't make sense afaik.\n            this.OPTION(() => {\n              this.CONSUME(operator_tokens.token_operator_dot);\n              this.SUBRULE2(this.atomic_expression, { LABEL: 'right_hand'});\n            });\n          }\n        },\n        // Real number without a leading expression.\n        // ie. \".05\"\n        {\n          ALT: () => {\n            this.CONSUME2(operator_tokens.token_operator_dot);\n            this.SUBRULE3(this.atomic_expression, { LABEL: 'right_hand'});\n          }\n        },\n      ]);\n    });\n\n    this.RULE('round_expression', () => {\n      this.CONSUME(operator_tokens.token_operator_round);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('whole_number_expression', () => {\n      this.AT_LEAST_ONE(() => { this.SUBRULE(this.whole_number); });\n    });\n\n    this.RULE('whole_number', () => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.whole_number_zero) },\n        { ALT: () => this.SUBRULE(this.whole_number_one) },\n        { ALT: () => this.SUBRULE(this.whole_number_two) },\n        { ALT: () => this.SUBRULE(this.whole_number_three) },\n        { ALT: () => this.SUBRULE(this.whole_number_four) },\n        { ALT: () => this.SUBRULE(this.whole_number_five) },\n        { ALT: () => this.SUBRULE(this.whole_number_six) },\n        { ALT: () => this.SUBRULE(this.whole_number_seven) },\n        { ALT: () => this.SUBRULE(this.whole_number_eight) },\n        { ALT: () => this.SUBRULE(this.whole_number_nine) },\n      ]);\n    });\n\n    this.RULE('whole_number_zero', () => {\n      this.CONSUME(number_tokens.token_number_zero);\n    });\n\n    this.RULE('whole_number_one', () => {\n      this.CONSUME(number_tokens.token_number_one);\n    });\n\n    this.RULE('whole_number_two', () => {\n      this.CONSUME(number_tokens.token_number_two);\n    });\n\n    this.RULE('whole_number_three', () => {\n      this.CONSUME(number_tokens.token_number_three);\n    });\n\n    this.RULE('whole_number_four', () => {\n      this.CONSUME(number_tokens.token_number_four);\n    });\n\n    this.RULE('whole_number_five', () => {\n      this.CONSUME(number_tokens.token_number_five);\n    });\n\n    this.RULE('whole_number_six', () => {\n      this.CONSUME(number_tokens.token_number_six);\n    });\n\n    this.RULE('whole_number_seven', () => {\n      this.CONSUME(number_tokens.token_number_seven);\n    });\n\n    this.RULE('whole_number_eight', () => {\n      this.CONSUME(number_tokens.token_number_eight);\n    });\n\n    this.RULE('whole_number_nine', () => {\n      this.CONSUME(number_tokens.token_number_nine);\n    });\n\n    this.RULE('variable_expression', () => {\n      this.CONSUME(token_bracket_curley_open);\n      this.CONSUME(token_string);\n      this.CONSUME(token_bracket_curley_close);\n    });\n\n    this.performSelfAnalysis();\n  }\n}\n\nexport const getParser = () => new Parser([\n  token_bracket_curley_open,\n  token_bracket_curley_close,\n  token_bracket_round_close,\n  token_bracket_round_open,\n  ...Object.values(operator_tokens),\n  ...Object.values(number_tokens),\n  token_string,\n]);\n\nexport default getParser();","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport parser from './parser.js';\n\nconst BaseSQLVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\n\nconst do_add_values = values => values.reduce((accumulator, value) => (accumulator + value));\nconst do_divide_values = values => values.reduce((accumulator, value) => (accumulator / value));\nconst do_exponential_values = values => values.reduce((accumulator, value) => (accumulator ** value));\nconst do_minus_values = values => values.reduce((accumulator, value) => (accumulator - value));\nconst do_modulus_values = values => values.reduce((accumulator, value) => (accumulator % value));\nconst do_multiply_values = values => values.reduce((accumulator, value) => (accumulator * value));\n\nfunction binary_expression(ctx, operator_function, visit_fn,options) {\n  let left_hand_visit = visit_fn(ctx.left_hand, options);\n\n  if (ctx.right_hand) {\n    // Visit each item in the right hand array.\n    const right_hand_visits = ctx.right_hand.map(right_hand => visit_fn(right_hand, options));\n\n    // We've got an array of an array of values.\n    // So we condense it down to an array of values.\n    const right_hand_values = right_hand_visits.map(visit => do_add_values(visit.values));\n\n    // return our total values together in our own array of values.\n    return {\n      values: [\n        operator_function([\n          do_add_values(left_hand_visit.values),\n          ...right_hand_values\n        ])\n      ],\n    };\n  }\n\n  return {\n    values: left_hand_visit.values,\n  };\n}\n\nexport class Interpreter extends BaseSQLVisitor {\n  constructor() {\n    super();\n\n    this.validateVisitor();\n  }\n\n  expression(ctx, options) {\n    return this.visit(ctx.expression, options);\n  }\n\n  // Interpreter methods are ordered alphabetically.\n\n  absolute_expression(ctx, options) {\n    return {\n      values: [Math.abs(do_add_values(this.visit(ctx.expression, options).values))],\n    };\n  }\n\n  addition_expression(ctx, options) {\n    return binary_expression(ctx, do_add_values, this.visit.bind(this), options);\n  }\n\n  atomic_expression(ctx, options) {\n    return this.visit(ctx.expression, options);\n  }\n\n  ceil_expression(ctx, options) {\n    return {\n      values: [Math.ceil(do_add_values(this.visit(ctx.expression, options).values))],\n    };\n  }\n\n  die_expression(ctx, options) {\n    const left_hand_visit = this.visit(ctx.left_hand, options);\n  \n    if (ctx.right_hand) {\n      // Visit each item in the right hand array.\n      const right_hand_visits = ctx.right_hand.map(right_hand => this.visit(right_hand, options));\n  \n      // We've got an array of an array of values.\n      // So we condense it down to an array of values.\n      const right_hand_values = right_hand_visits.map(visit => do_add_values(visit.values));\n\n      const values = right_hand_values.reduce((previous_values, die_size) => {\n        let num_dice = do_add_values(previous_values);\n        const sign = Math.sign(num_dice) * Math.sign(die_size);\n\n        if (sign === 0)\n          return [0];\n  \n        const next_values = [];\n        num_dice = Math.abs(num_dice);\n        for (let i = 0; i < num_dice; i++)\n          next_values.push(sign * Math.floor(options.prng() * Math.abs(die_size) + .9999));\n\n        return next_values;\n      }, left_hand_visit.values);\n\n      if (values.length === 0)\n        values.push(0);\n  \n      // return our total values together in our own array of values.\n      return {\n        values,\n      };\n    }\n  \n    return {\n      values: [do_add_values(left_hand_visit.values)],\n    };\n  }\n\n  divide_expression(ctx, options) {\n    return binary_expression(ctx, do_divide_values, this.visit.bind(this), options);\n  }\n\n  dot_expression(ctx, options) {\n    return this.visit(ctx.expression, options);\n  }\n\n  exponential_expression(ctx, options) {\n    return binary_expression(ctx, do_exponential_values, this.visit.bind(this), options);\n  }\n\n  floor_expression(ctx, options) {\n    return {\n      values: [Math.floor(do_add_values(this.visit(ctx.expression, options).values))],\n    };\n  }\n\n  minus_expression(ctx, options) {\n    return binary_expression(ctx, do_minus_values, this.visit.bind(this), options);\n  }\n\n  modulus_expression(ctx, options) {\n    return binary_expression(ctx, do_modulus_values, this.visit.bind(this), options);\n  }\n\n  multiply_expression(ctx, options) {\n    return binary_expression(ctx, do_multiply_values, this.visit.bind(this), options);\n  }\n\n  negative_number_expression(ctx, options) {\n    return {\n      values: [-do_add_values(this.visit(ctx.expression, options).values)],\n    };\n  }\n\n  parenthesis_expression(ctx, options) {\n    return this.visit(ctx.expression, options);\n  }\n\n  real_number_expression(ctx, options) {\n    if (ctx.right_hand) {\n      const right_hand_visit = this.visit(ctx.right_hand, options);\n      const num_digits = right_hand_visit.values.length;\n      const decimal_value = do_add_values(right_hand_visit.values) / (10 ** num_digits);\n\n      if (ctx.left_hand)\n        return {\n          values: [do_add_values(this.visit(ctx.left_hand, options).values) + decimal_value],\n        };\n\n      return {\n        values: [decimal_value],\n      };\n    }\n\n    return this.visit(ctx.left_hand, options);\n  }\n\n  round_expression(ctx, options) {\n    return {\n      values: [Math.round(do_add_values(this.visit(ctx.expression, options).values))],\n    };\n  }\n\n  whole_number_expression(ctx) {\n    let values = [];\n\n    const length = ctx.whole_number.length;\n\n    for (let i in ctx.whole_number) {\n      values.push(this.visit(ctx.whole_number[i]) * (10 ** (length - 1 - i)));\n    }\n\n    return {\n      values,\n    };\n  }\n\n  whole_number(ctx) {\n    const key = Object.keys(ctx)[0];\n    return this.visit(ctx[key]);\n  }\n\n  whole_number_zero()  { return 0; }\n  whole_number_one()   { return 1; }\n  whole_number_two()   { return 2; }\n  whole_number_three() { return 3; }\n  whole_number_four()  { return 4; }\n  whole_number_five()  { return 5; }\n  whole_number_six()   { return 6; }\n  whole_number_seven() { return 7; }\n  whole_number_eight() { return 8; }\n  whole_number_nine()  { return 9; }\n\n  variable_expression(ctx, options) {\n    return {\n      values: [options.variables.get(ctx.string[0].image) || 0],\n    };\n  }\n\n}\n\nconst interpreter = new Interpreter(Math.random);\n\nexport default interpreter;","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport lexer from './lexer.js';\nimport { Interpreter } from './interpreter.js';\nimport { getParser } from './parser.js';\n\n/**\n * @typedef {Object} RollOutput The output from a roll\n * @property {str|any} image A string if undefined, but defined by the formatter\n *  if provided. Unused at this time.\n * @property {Number} value The result of a roll of of the die\n */\n\n/**\n * @typedef {Object} Formatter The object that determines the image of the roll.\n *  This is unused right now, it's a placeholder for future improvements.\n */\n\n/**\n * @typedef {Object} RollOptions\n * @property {Formatter?} formatter The object that determines the image of the roll.\n *  This is unused right now, it's a placeholder for future improvements.\n * @property {Function?} prng A function that returns a number between 0 and 1\n *  non-inclusive. Default is Math.random.\n * @property {Iterable<Iterable>?} variables Values utilized to translate die variable references\n *  into their appropriate values. ex. [ ['strength', 10], ['dexterity', 12] ]\n */\n\nexport class Dice {\n  constructor() {\n    this.interpreter = new Interpreter();\n    this.parser = getParser();\n  }\n  \n  /**\n   * @function roll\n   * @param {string} input A string representation of a die.\n   * @param {RollOptions} options How to format the image of the RollOutput.\n   * @returns {RollOutput} The result of the die being rolled.\n   * */\n  roll(input, { prng, variables } = {}) {\n    // Tokenize the input with our lexer.\n    const lex_result = lexer.tokenize(input);\n\n    if (lex_result.errors.length > 0) {\n      const offset = lex_result.errors[0].offset;\n      throw new Error(`Unexpected character \"${input.charAt(offset)}\" at position: ${offset}`);\n    }\n\n    // Do we have a prng? If not, set it to Math.random\n    if (!prng)\n      prng = Math.random;\n\n    // If we don't have variables, start with an empty array\n    if (!variables)\n      variables = [];\n\n    const variable_map = new Map();\n    variables.forEach((key_value) => {\n      // TODO: Assert key is a string.\n      // TODO: Assert key follows the correct format.\n      variable_map.set(key_value[0].toLowerCase(), key_value[1]);\n    });\n\n    // Pass our tokens into our parser\n    this.parser.input = lex_result.tokens;\n    const cst = this.parser.expression();\n\n    // Interpret the parsed tokens and return the result.\n    return this.interpreter.visit(cst, {\n      prng,\n      variables: variable_map\n    });\n  }\n}\n"],"names":["createToken","name","pattern","token_bracket_curley_close","token_bracket_curley_open","token_bracket_round_close","token_bracket_round_open","token_operator_absolute","token_operator_ceil","token_operator_dice","token_operator_divide","token_operator_dot","token_operator_exponent","token_operator_floor","token_operator_modulus","token_operator_minus","token_operator_multiply","token_operator_plus","token_operator_round","token_string","token_number_zero","token_number_one","token_number_two","token_number_three","token_number_four","token_number_five","token_number_six","token_number_seven","token_number_eight","token_number_nine","token_whitespace_skip","group","Lexer","SKIPPED","tokens","Object","values","operator_tokens","number_tokens","lexer","Parser","CstParser","constructor","super","this","RULE","SUBRULE","minus_expression","LABEL","CONSUME","operator_tokens.token_operator_absolute","parenthesis_expression","modulus_expression","MANY","operator_tokens.token_operator_plus","SUBRULE2","OR","ALT","absolute_expression","ceil_expression","floor_expression","negative_number_expression","round_expression","variable_expression","whole_number_expression","operator_tokens.token_operator_ceil","dot_expression","operator_tokens.token_operator_dice","multiply_expression","operator_tokens.token_operator_divide","real_number_expression","die_expression","operator_tokens.token_operator_exponent","operator_tokens.token_operator_floor","addition_expression","operator_tokens.token_operator_minus","divide_expression","operator_tokens.token_operator_modulus","exponential_expression","operator_tokens.token_operator_multiply","expression","atomic_expression","OPTION","operator_tokens.token_operator_dot","CONSUME2","SUBRULE3","operator_tokens.token_operator_round","AT_LEAST_ONE","whole_number","whole_number_zero","whole_number_one","whole_number_two","whole_number_three","whole_number_four","whole_number_five","whole_number_six","whole_number_seven","whole_number_eight","whole_number_nine","number_tokens.token_number_zero","number_tokens.token_number_one","number_tokens.token_number_two","number_tokens.token_number_three","number_tokens.token_number_four","number_tokens.token_number_five","number_tokens.token_number_six","number_tokens.token_number_seven","number_tokens.token_number_eight","number_tokens.token_number_nine","performSelfAnalysis","getParser","BaseSQLVisitor","getBaseCstVisitorConstructorWithDefaults","do_add_values","reduce","accumulator","value","do_divide_values","do_exponential_values","do_minus_values","do_modulus_values","do_multiply_values","binary_expression","ctx","operator_function","visit_fn","options","left_hand_visit","left_hand","right_hand","right_hand_values","map","visit","Interpreter","validateVisitor","Math","abs","bind","ceil","previous_values","die_size","num_dice","sign","next_values","i","push","floor","prng","length","right_hand_visit","num_digits","decimal_value","round","key","keys","variables","get","string","image","random","Dice","interpreter","parser","roll","input","lex_result","tokenize","errors","offset","Error","charAt","variable_map","Map","forEach","key_value","set","toLowerCase","cst"],"mappings":"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"}