{"version":3,"file":"Dice.umd.js","sources":["../src/tokens/brackets.js","../src/tokens/operators.js","../src/tokens/numbers.js","../src/tokens/whitespace.js","../src/lexer.js","../src/parser.js","../src/interpreter.js","../src/Dice.js"],"sourcesContent":["/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\n// Angle Brackets\nexport const token_bracket_angle_close = createToken({\n  name: 'bracket_angle_close',\n  pattern: />/,\n});\n\nexport const token_bracket_angle_open = createToken({\n  name: 'bracket_angle_open',\n  pattern: /</,\n});\n\n\n// Curley Brackets\nexport const token_bracket_curley_close = createToken({\n  name: 'bracket_curley_close',\n  pattern: /\\}/,\n});\n\nexport const token_bracket_curley_open = createToken({\n  name: 'bracket_curley_open',\n  pattern: /\\{/,\n});\n\n\n// Round Brackets, aka parenthesis\nexport const token_bracket_round_close = createToken({\n  name: 'bracket_round_close',\n  pattern: /\\)/,\n});\n\nexport const token_bracket_round_open = createToken({\n  name: 'bracket_round_open',\n  pattern: /\\(/,\n});\n\n\n// Square Brackets\nexport const token_bracket_square_close = createToken({\n  name: 'bracket_square_close',\n  pattern: /\\]/,\n});\n\nexport const token_bracket_square_open = createToken({\n  name: 'bracket_square_open',\n  pattern: /\\[/,\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\nexport const token_operator_absolute = createToken({\n  name: 'abs',\n  pattern: /abs/,\n});\n\nexport const token_operator_ceil = createToken({\n  name: 'ceil',\n  pattern: /ceil/,\n});\n\nexport const token_operator_dice = createToken({\n  name: 'd',\n  pattern: /[dD]/,\n});\n\nexport const token_operator_divide = createToken({\n  name: 'divide',\n  pattern: /\\//,\n});\n\nexport const token_operator_dot = createToken({\n  name: 'dot',\n  pattern: /\\./,\n});\n\nexport const token_operator_exponent = createToken({\n  name: 'exponent',\n  pattern: /\\*\\*/,\n});\n\nexport const token_operator_floor = createToken({\n  name: 'floor',\n  pattern: /floor/,\n});\n\nexport const token_operator_modulus = createToken({\n  name: 'modulus',\n  pattern: /%/,\n});\n\nexport const token_operator_minus = createToken({\n  name: 'minus',\n  pattern: /-/,\n});\n\nexport const token_operator_multiply = createToken({\n  name: 'multiply',\n  pattern: /\\*/,\n});\n\nexport const token_operator_plus = createToken({\n  name: 'plus',\n  pattern: /\\+/,\n});\n\nexport const token_operator_round = createToken({\n  name: 'round',\n  pattern: /round/,\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken } from 'chevrotain';\n\nexport const token_number_zero = createToken({\n  name: 'number_zero',\n  pattern: /0/,\n});\n\nexport const token_number_one = createToken({\n  name: 'number_one',\n  pattern: /1/,\n});\n\nexport const token_number_two = createToken({\n  name: 'number_two',\n  pattern: /2/,\n});\n\nexport const token_number_three = createToken({\n  name: 'number_three',\n  pattern: /3/,\n});\n\nexport const token_number_four = createToken({\n  name: 'number_four',\n  pattern: /4/,\n});\n\nexport const token_number_five = createToken({\n  name: 'number_five',\n  pattern: /5/,\n});\n\nexport const token_number_six = createToken({\n  name: 'number_six',\n  pattern: /6/,\n});\n\nexport const token_number_seven = createToken({\n  name: 'number_seven',\n  pattern: /7/,\n});\n\nexport const token_number_eight = createToken({\n  name: 'number_eight',\n  pattern: /8/,\n});\n\nexport const token_number_nine = createToken({\n  name: 'number_nine',\n  pattern: /9/,\n});","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { createToken, Lexer } from 'chevrotain';\n\nexport const token_whitespace = createToken({\n  name: 'whitespace',\n  pattern: /\\s/,\n});\n\nexport const token_whitespace_skip = createToken({\n  group: Lexer.SKIPPED,\n  name: 'whitespace',\n  pattern: /\\s/\n});\n","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { Lexer } from 'chevrotain';\nimport {\n  token_bracket_round_close,\n  token_bracket_round_open\n} from './tokens/brackets.js';\n\nimport {\n  token_operator_absolute,\n  token_operator_ceil,\n  token_operator_dice,\n  token_operator_divide,\n  token_operator_dot,\n  token_operator_exponent,\n  token_operator_floor,\n  token_operator_minus,\n  token_operator_modulus,\n  token_operator_multiply,\n  token_operator_plus,\n  token_operator_round,\n} from './tokens/operators.js';\n\nimport {\n  token_number_zero,\n  token_number_one,\n  token_number_two,\n  token_number_three,\n  token_number_four,\n  token_number_five,\n  token_number_six,\n  token_number_seven,\n  token_number_eight,\n  token_number_nine,\n} from './tokens/numbers.js';\n\nimport { token_whitespace_skip } from './tokens/whitespace.js';\n\nconst multiModeLexerDefinition = {\n  modes: {\n    dice_mode: [\n      token_bracket_round_close,\n      token_bracket_round_open,\n\n      token_operator_absolute,\n      token_operator_ceil,\n      token_operator_dice,\n      token_operator_divide,\n      token_operator_dot,\n      token_operator_exponent,\n      token_operator_floor,\n      token_operator_minus,\n      token_operator_modulus,\n      token_operator_multiply,\n      token_operator_plus,\n      token_operator_round,\n\n      token_number_zero,\n      token_number_one,\n      token_number_two,\n      token_number_three,\n      token_number_four,\n      token_number_five,\n      token_number_six,\n      token_number_seven,\n      token_number_eight,\n      token_number_nine,\n\n      token_whitespace_skip,\n    ],\n  },\n  defaultMode: 'dice_mode',\n};\n\nexport default new Lexer(multiModeLexerDefinition);","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport { CstParser } from 'chevrotain';\n\nimport {\n  token_bracket_round_close,\n  token_bracket_round_open\n} from './tokens/brackets.js';\n\nimport {\n  token_operator_absolute,\n  token_operator_ceil,\n  token_operator_dice,\n  token_operator_divide,\n  token_operator_dot,\n  token_operator_exponent,\n  token_operator_floor,\n  token_operator_minus,\n  token_operator_modulus,\n  token_operator_multiply,\n  token_operator_plus,\n  token_operator_round,\n} from './tokens/operators.js';\n\nimport {\n  token_number_zero,\n  token_number_one,\n  token_number_two,\n  token_number_three,\n  token_number_four,\n  token_number_five,\n  token_number_six,\n  token_number_seven,\n  token_number_eight,\n  token_number_nine,\n} from './tokens/numbers.js';\n\nexport class Parser extends CstParser {\n  constructor(tokens) {\n    super(tokens);\n\n    this.RULE('expressions', () => {\n      this.MANY(() => {\n        this.SUBRULE(this.expression, { LABEL: 'expressions' });\n      });\n    });\n\n    // Ordered by operation. The higher it is, the more precedence.\n    this.RULE('expression', () => {\n      this.OR([\n        // Numbers\n        { ALT: () => this.SUBRULE(this.whole_number_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.real_number_expression, { LABEL: 'expression'}) },\n\n        // Grouping\n        { ALT: () => this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression'}) },\n\n        // Mathematical Functions\n        { ALT: () => this.SUBRULE(this.absolute_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.ceil_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.floor_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.round_expression, { LABEL: 'expression'}) },\n\n        // Dice\n        { ALT: () => this.SUBRULE(this.die_expression, { LABEL: 'expression'}) },\n\n        // Algebra\n        { ALT: () => this.SUBRULE(this.exponential_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.multiply_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.divide_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.modulus_expression, { LABEL: 'expression'}) },\n\n        { ALT: () => this.SUBRULE(this.addition_expression, { LABEL: 'expression'}) },\n        { ALT: () => this.SUBRULE(this.minus_expression, { LABEL: 'expression'}) },\n      ]);\n    });\n\n    // While the above is ordered by order of operations, the below is\n    // ordered alphabetically.\n    this.RULE('absolute_expression', () => {\n      this.CONSUME(token_operator_absolute);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('addition_expression', () => {\n      this.CONSUME(token_operator_plus);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('ceil_expression', () => {\n      this.CONSUME(token_operator_ceil);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('die_expression', () => {\n      this.CONSUME(token_operator_dice);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('divide_expression', () => {\n      this.CONSUME(token_operator_divide);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('exponential_expression', () => {\n      this.CONSUME(token_operator_exponent);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('floor_expression', () => {\n      this.CONSUME(token_operator_floor);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('minus_expression', () => {\n      this.CONSUME(token_operator_minus);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('modulus_expression', () => {\n      this.CONSUME(token_operator_modulus);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('multiply_expression', () => {\n      this.CONSUME(token_operator_multiply);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('parenthesis_expression', () => {\n      this.CONSUME(token_bracket_round_open);\n      this.SUBRULE(this.expressions, { LABEL: 'expression' });\n      this.CONSUME(token_bracket_round_close);\n    });\n\n    this.RULE('real_number_expression', () => {\n      this.CONSUME(token_operator_dot);\n      this.SUBRULE(this.expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('round_expression', () => {\n      this.CONSUME(token_operator_round);\n      this.SUBRULE(this.parenthesis_expression, { LABEL: 'expression' });\n    });\n\n    this.RULE('whole_number_expression', () => {\n      this.AT_LEAST_ONE(() => { this.SUBRULE(this.whole_number); });\n    });\n\n    this.RULE('whole_number', () => {\n      this.OR([\n        { ALT: () => this.SUBRULE(this.whole_number_zero) },\n        { ALT: () => this.SUBRULE(this.whole_number_one) },\n        { ALT: () => this.SUBRULE(this.whole_number_two) },\n        { ALT: () => this.SUBRULE(this.whole_number_three) },\n        { ALT: () => this.SUBRULE(this.whole_number_four) },\n        { ALT: () => this.SUBRULE(this.whole_number_five) },\n        { ALT: () => this.SUBRULE(this.whole_number_six) },\n        { ALT: () => this.SUBRULE(this.whole_number_seven) },\n        { ALT: () => this.SUBRULE(this.whole_number_eight) },\n        { ALT: () => this.SUBRULE(this.whole_number_nine) },\n      ]);\n    });\n\n    this.RULE('whole_number_zero', () => {\n      this.CONSUME(token_number_zero);\n    });\n\n    this.RULE('whole_number_one', () => {\n      this.CONSUME(token_number_one);\n    });\n\n    this.RULE('whole_number_two', () => {\n      this.CONSUME(token_number_two);\n    });\n\n    this.RULE('whole_number_three', () => {\n      this.CONSUME(token_number_three);\n    });\n\n    this.RULE('whole_number_four', () => {\n      this.CONSUME(token_number_four);\n    });\n\n    this.RULE('whole_number_five', () => {\n      this.CONSUME(token_number_five);\n    });\n\n    this.RULE('whole_number_six', () => {\n      this.CONSUME(token_number_six);\n    });\n\n    this.RULE('whole_number_seven', () => {\n      this.CONSUME(token_number_seven);\n    });\n\n    this.RULE('whole_number_eight', () => {\n      this.CONSUME(token_number_eight);\n    });\n\n    this.RULE('whole_number_nine', () => {\n      this.CONSUME(token_number_nine);\n    });\n\n    this.performSelfAnalysis();\n  }\n}\n\nexport const getParser = () => new Parser([\n  token_bracket_round_close,\n  token_bracket_round_open,\n\n  token_operator_absolute,\n  token_operator_ceil,\n  token_operator_dice,\n  token_operator_divide,\n  token_operator_dot,\n  token_operator_exponent,\n  token_operator_floor,\n  token_operator_minus,\n  token_operator_modulus,\n  token_operator_multiply,\n  token_operator_plus,\n  token_operator_round,\n\n  token_number_zero,\n  token_number_one,\n  token_number_two,\n  token_number_three,\n  token_number_four,\n  token_number_five,\n  token_number_six,\n  token_number_seven,\n  token_number_eight,\n  token_number_nine,\n]);\n\nexport default getParser();","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport parser from './parser.js';\n\nconst BaseSQLVisitor = parser.getBaseCstVisitorConstructorWithDefaults();\n\nconst sum_values = values => values.reduce((accumulator, value) => accumulator + value, 0);\n\nexport class Interpreter extends BaseSQLVisitor {\n  constructor(prng) {\n    super();\n\n    this.prng = prng;\n    this.validateVisitor();\n  }\n\n  expressions(ctx) {\n    let accumulator = {\n      values: [],\n    };\n\n    if (ctx.expressions) {\n      for (let expression of ctx.expressions) {\n        accumulator = this.visit(expression, accumulator);\n      }\n    \n      return accumulator;\n    }\n    \n    return accumulator;\n  }\n\n  expression(ctx, accumulator) {\n    return this.visit(ctx.expression, accumulator);\n  }\n\n  // Interpreter methods are ordered alphabetically.\n\n  absolute_expression(ctx) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [Math.abs(sum_values(visit.values))],\n    };\n  }\n\n  addition_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    if (accumulator) {\n      return {\n        values: [sum_values(accumulator.values) + sum_values(visit.values)],\n      };\n    }\n\n    return {\n      values: [sum_values(visit.values)],\n    };\n  }\n\n  ceil_expression(ctx) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [Math.ceil(sum_values(visit.values))],\n    };\n  }\n\n  die_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n    let values = [];\n\n    const num_die = sum_values(accumulator.values);\n    const die_size = sum_values(visit.values);\n\n    for (let i = 0; i < num_die; i++) {\n      values.push(Math.floor((this.prng() * die_size)) + 1);\n    }\n\n    return {\n      values,\n    };\n  }\n\n  divide_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [sum_values(accumulator.values) / sum_values(visit.values)],\n    };\n  }\n\n  exponential_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [sum_values(accumulator.values) ** sum_values(visit.values)],\n    };\n  }\n\n  floor_expression(ctx) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [Math.floor(sum_values(visit.values))],\n    };\n  }\n\n  minus_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    if (accumulator) {\n      return {\n        values: [sum_values(accumulator.values) - sum_values(visit.values)],\n      };\n    }\n\n    return {\n      values: [-sum_values(visit.values)],\n    };\n  }\n\n  modulus_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [sum_values(accumulator.values) % sum_values(visit.values)],\n    };\n  }\n\n  multiply_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [sum_values(accumulator.values) * sum_values(visit.values)],\n    };\n  }\n\n  parenthesis_expression(ctx) {\n    const visit = this.visit(ctx.expression);\n  \n    return {\n      values: visit.values,\n    };\n  }\n\n  real_number_expression(ctx, accumulator) {\n    const visit = this.visit(ctx.expression);\n    const num_digits = visit.values.length;\n    const decimal_value = sum_values(visit.values) / (10 ** num_digits);\n\n    if (accumulator) {\n      return {\n        values: [sum_values(accumulator.values) + decimal_value],\n      };\n    }\n\n    return {\n      values: [decimal_value],\n    };\n  }\n\n  round_expression(ctx) {\n    const visit = this.visit(ctx.expression);\n\n    return {\n      values: [Math.round(sum_values(visit.values))],\n    };\n  }\n\n  whole_number_expression(ctx) {\n    let values = [];\n\n    const length = ctx.whole_number.length;\n\n    for (let i in ctx.whole_number) {\n      const visit = this.visit(ctx.whole_number[i]);\n      values.push(visit.values[0] * (10 ** (length - 1 - i)));\n    }\n\n    return {\n      values,\n    };\n  }\n\n  whole_number(ctx) {\n    const key = Object.keys(ctx)[0];\n    return this.visit(ctx[key]);\n  }\n\n  whole_number_zero()  { return { values: [0] }; }\n  whole_number_one()   { return { values: [1] }; }\n  whole_number_two()   { return { values: [2] }; }\n  whole_number_three() { return { values: [3] }; }\n  whole_number_four()  { return { values: [4] }; }\n  whole_number_five()  { return { values: [5] }; }\n  whole_number_six()   { return { values: [6] }; }\n  whole_number_seven() { return { values: [7] }; }\n  whole_number_eight() { return { values: [8] }; }\n  whole_number_nine()  { return { values: [9] }; }\n\n}\n\nconst interpreter = new Interpreter(Math.random);\n\nexport default interpreter;","/*\n  Copyright (C) 2022 REVTTS, Ronald M Zielaznicki\n\n  This file is part of REVTTS Dice.\n\n  REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of\n  the GNU General Public License as published by the Free Software Foundation, either\n  version 3 of the License, or any later version.\n\n  REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n  without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n  PURPOSE. See the GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along with REVTTS Dice.\n  If not, see <https://www.gnu.org/licenses/>. \n*/\n\nimport lexer from './lexer.js';\nimport { Interpreter } from './interpreter.js';\nimport { getParser } from './parser.js';\n\n/**\n * @typedef {Object} RollOutput The output from a roll\n * @property {str|any} image A string if undefined, but defined by the formatter\n *  if provided. Unused at this time.\n * @property {Number} value The result of a roll of of the die\n */\n\n/**\n * @typedef {Object} Formatter The object that determines the image of the roll.\n *  This is unused right now, it's a placeholder for future improvements.\n */\n\n/**\n * @typedef {Object} RollOptions\n * @property {Formatter?} formatter The object that determines the image of the roll.\n *  This is unused right now, it's a placeholder for future improvements.\n * @property {Function?} prng A function that returns a number between 0 and 1\n *  non-inclusive. Default is Math.random.\n */\n\nexport class Dice {\n  constructor() {\n    this.parser = getParser();\n  }\n  \n  /**\n   * @function roll\n   * @param {string} input A string representation of a die.\n   * @param {RollOptions} options How to format the image of the RollOutput.\n   * @returns {RollOutput} The result of the die being rolled.\n   * */\n  roll(input, { prng } = {}) {\n    // Tokenize the input with our lexer.\n    const lex_result = lexer.tokenize(input);\n\n    if (lex_result.errors.length > 0) {\n      const offset = lex_result.errors[0].offset;\n      throw new Error(`Unexpected character \"${input.charAt(offset)}\" at position: ${offset}`);\n    }\n\n    // Do we have a prng? If not, set it to Math.random\n    if (!prng)\n      prng = Math.random;\n\n    // Pass our tokens into our parser\n    this.parser.input = lex_result.tokens;\n    const cst = this.parser.expressions();\n\n    // TODO: Set this in the constructor, and pass the prng and formatter\n    // into the expressions so we don't have to create an interpreter here.\n    const interpreter = new Interpreter(prng);\n\n    // Interpret the parsed tokens and return the result.\n    return interpreter.visit(cst);\n  }\n}\n"],"names":["createToken","name","pattern","token_bracket_round_close","token_bracket_round_open","token_operator_absolute","token_operator_ceil","token_operator_dice","token_operator_divide","token_operator_dot","token_operator_exponent","token_operator_floor","token_operator_modulus","token_operator_minus","token_operator_multiply","token_operator_plus","token_operator_round","token_number_zero","token_number_one","token_number_two","token_number_three","token_number_four","token_number_five","token_number_six","token_number_seven","token_number_eight","token_number_nine","token_whitespace_skip","group","Lexer","SKIPPED","multiModeLexerDefinition","modes","dice_mode","defaultMode","lexer","Parser","CstParser","constructor","tokens","super","this","RULE","MANY","SUBRULE","expression","LABEL","OR","ALT","whole_number_expression","real_number_expression","parenthesis_expression","absolute_expression","ceil_expression","floor_expression","round_expression","die_expression","exponential_expression","multiply_expression","divide_expression","modulus_expression","addition_expression","minus_expression","CONSUME","expressions","AT_LEAST_ONE","whole_number","whole_number_zero","whole_number_one","whole_number_two","whole_number_three","whole_number_four","whole_number_five","whole_number_six","whole_number_seven","whole_number_eight","whole_number_nine","performSelfAnalysis","getParser","BaseSQLVisitor","getBaseCstVisitorConstructorWithDefaults","sum_values","values","reduce","accumulator","value","Interpreter","prng","validateVisitor","ctx","visit","Math","abs","ceil","num_die","die_size","i","push","floor","num_digits","length","decimal_value","round","key","Object","keys","random","Dice","parser","roll","input","lex_result","tokenize","errors","offset","Error","charAt","cst"],"mappings":"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"}