/*!
Copyright (C) 2022 REVTTS, Ronald M Zielaznicki

This file is part of REVTTS Dice.

REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or any later version.

REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with REVTTS Dice.
If not, see <https://www.gnu.org/licenses/>. 
*/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("chevrotain")):"function"==typeof define&&define.amd?define(["chevrotain"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Dice=t(e.chevrotain)}(this,(function(e){"use strict";e.createToken({name:"bracket_angle_close",pattern:/>/}),e.createToken({name:"bracket_angle_open",pattern:/</});const t=e.createToken({name:"bracket_curley_close",pattern:/\}/}),s=e.createToken({name:"bracket_curley_open",pattern:/\{/}),n=e.createToken({name:"bracket_round_close",pattern:/\)/}),r=e.createToken({name:"bracket_round_open",pattern:/\(/});e.createToken({name:"bracket_square_close",pattern:/\]/}),e.createToken({name:"bracket_square_open",pattern:/\[/});const i=e.createToken({name:"abs",pattern:/abs/}),o=e.createToken({name:"ceil",pattern:/ceil/}),h=e.createToken({name:"d",pattern:/[dD]/}),a=e.createToken({name:"divide",pattern:/\//}),_=e.createToken({name:"dot",pattern:/\./}),u=e.createToken({name:"exponent",pattern:/\*\*/}),p=e.createToken({name:"floor",pattern:/floor/}),l=e.createToken({name:"modulus",pattern:/%/}),L=e.createToken({name:"minus",pattern:/-/}),U=e.createToken({name:"multiply",pattern:/\*/}),E=e.createToken({name:"plus",pattern:/\+/}),m=e.createToken({name:"round",pattern:/round/});var c=Object.freeze({__proto__:null,token_operator_absolute:i,token_operator_ceil:o,token_operator_dice:h,token_operator_divide:a,token_operator_dot:_,token_operator_exponent:u,token_operator_floor:p,token_operator_modulus:l,token_operator_minus:L,token_operator_multiply:U,token_operator_plus:E,token_operator_round:m});const x=e.createToken({name:"string",pattern:/[a-zA-Z]+/}),d=e.createToken({name:"number_zero",pattern:/0/}),b=e.createToken({name:"number_one",pattern:/1/}),v=e.createToken({name:"number_two",pattern:/2/}),R=e.createToken({name:"number_three",pattern:/3/}),B=e.createToken({name:"number_four",pattern:/4/}),S=e.createToken({name:"number_five",pattern:/5/}),k=e.createToken({name:"number_six",pattern:/6/}),A=e.createToken({name:"number_seven",pattern:/7/}),f=e.createToken({name:"number_eight",pattern:/8/}),T=e.createToken({name:"number_nine",pattern:/9/});var w=Object.freeze({__proto__:null,token_number_zero:d,token_number_one:b,token_number_two:v,token_number_three:R,token_number_four:B,token_number_five:S,token_number_six:k,token_number_seven:A,token_number_eight:f,token_number_nine:T});e.createToken({name:"whitespace",pattern:/\s/});const M=e.createToken({group:e.Lexer.SKIPPED,name:"whitespace",pattern:/\s/}),O=[s,t,n,r,...Object.values(c),...Object.values(w),M,x];var g=new e.Lexer(O);class Parser extends e.CstParser{constructor(e){super(e),this.RULE("expression",(()=>{this.SUBRULE(this.minus_expression,{LABEL:"expression"})})),this.RULE("absolute_expression",(()=>{this.CONSUME(i),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("addition_expression",(()=>{this.SUBRULE(this.modulus_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(E),this.SUBRULE2(this.modulus_expression,{LABEL:"right_hand"})}))})),this.RULE("atomic_expression",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.absolute_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.ceil_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.floor_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.negative_number_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.round_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.variable_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.whole_number_expression,{LABEL:"expression"})}])})),this.RULE("ceil_expression",(()=>{this.CONSUME(o),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("die_expression",(()=>{this.SUBRULE(this.dot_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(h),this.SUBRULE2(this.dot_expression,{LABEL:"right_hand"})}))})),this.RULE("divide_expression",(()=>{this.SUBRULE(this.multiply_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(a),this.SUBRULE2(this.multiply_expression,{LABEL:"right_hand"})}))})),this.RULE("dot_expression",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.real_number_expression,{LABEL:"expression"})}])})),this.RULE("exponential_expression",(()=>{this.SUBRULE(this.die_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(u),this.SUBRULE2(this.die_expression,{LABEL:"right_hand"})}))})),this.RULE("floor_expression",(()=>{this.CONSUME(p),this.SUBRULE2(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("minus_expression",(()=>{this.SUBRULE(this.addition_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(L),this.SUBRULE2(this.addition_expression,{LABEL:"right_hand"})}))})),this.RULE("modulus_expression",(()=>{this.SUBRULE(this.divide_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(l),this.SUBRULE2(this.divide_expression,{LABEL:"right_hand"})}))})),this.RULE("multiply_expression",(()=>{this.SUBRULE(this.exponential_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(U),this.SUBRULE2(this.exponential_expression,{LABEL:"right_hand"})}))})),this.RULE("negative_number_expression",(()=>{this.CONSUME(L),this.SUBRULE(this.expression)})),this.RULE("parenthesis_expression",(()=>{this.CONSUME(r),this.SUBRULE(this.expression,{LABEL:"expression"}),this.CONSUME(n)})),this.RULE("real_number_expression",(()=>{this.OR([{ALT:()=>{this.SUBRULE(this.atomic_expression,{LABEL:"left_hand"}),this.OPTION((()=>{this.CONSUME(_),this.SUBRULE2(this.atomic_expression,{LABEL:"right_hand"})}))}},{ALT:()=>{this.CONSUME2(_),this.SUBRULE3(this.atomic_expression,{LABEL:"right_hand"})}}])})),this.RULE("round_expression",(()=>{this.CONSUME(m),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("whole_number_expression",(()=>{this.AT_LEAST_ONE((()=>{this.SUBRULE(this.whole_number)}))})),this.RULE("whole_number",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.whole_number_zero)},{ALT:()=>this.SUBRULE(this.whole_number_one)},{ALT:()=>this.SUBRULE(this.whole_number_two)},{ALT:()=>this.SUBRULE(this.whole_number_three)},{ALT:()=>this.SUBRULE(this.whole_number_four)},{ALT:()=>this.SUBRULE(this.whole_number_five)},{ALT:()=>this.SUBRULE(this.whole_number_six)},{ALT:()=>this.SUBRULE(this.whole_number_seven)},{ALT:()=>this.SUBRULE(this.whole_number_eight)},{ALT:()=>this.SUBRULE(this.whole_number_nine)}])})),this.RULE("whole_number_zero",(()=>{this.CONSUME(d)})),this.RULE("whole_number_one",(()=>{this.CONSUME(b)})),this.RULE("whole_number_two",(()=>{this.CONSUME(v)})),this.RULE("whole_number_three",(()=>{this.CONSUME(R)})),this.RULE("whole_number_four",(()=>{this.CONSUME(B)})),this.RULE("whole_number_five",(()=>{this.CONSUME(S)})),this.RULE("whole_number_six",(()=>{this.CONSUME(k)})),this.RULE("whole_number_seven",(()=>{this.CONSUME(A)})),this.RULE("whole_number_eight",(()=>{this.CONSUME(f)})),this.RULE("whole_number_nine",(()=>{this.CONSUME(T)})),this.RULE("variable_expression",(()=>{this.CONSUME(s),this.CONSUME(x),this.CONSUME(t)})),this.performSelfAnalysis()}}const N=()=>new Parser([s,t,n,r,...Object.values(c),...Object.values(w),x]);const C=N().getBaseCstVisitorConstructorWithDefaults(),y=e=>e.reduce(((e,t)=>e+t)),z=e=>e.reduce(((e,t)=>e/t)),j=e=>e.reduce(((e,t)=>e**t)),Y=e=>e.reduce(((e,t)=>e-t)),P=e=>e.reduce(((e,t)=>e%t)),D=e=>e.reduce(((e,t)=>e*t));function I(e,t,s,n){let r=s(e.left_hand,n);if(e.right_hand){const i=e.right_hand.map((e=>s(e,n))).map((e=>y(e.values)));return{values:[t([y(r.values),...i])]}}return{values:r.values}}class Interpreter extends C{constructor(){super(),this.validateVisitor()}expression(e,t){return this.visit(e.expression,t)}absolute_expression(e,t){return{values:[Math.abs(y(this.visit(e.expression,t).values))]}}addition_expression(e,t){return I(e,y,this.visit.bind(this),t)}atomic_expression(e,t){return this.visit(e.expression,t)}ceil_expression(e,t){return{values:[Math.ceil(y(this.visit(e.expression,t).values))]}}die_expression(e,t){const s=this.visit(e.left_hand,t);if(e.right_hand){const n=e.right_hand.map((e=>this.visit(e,t))).map((e=>y(e.values))).reduce(((e,s)=>{let n=y(e);const r=Math.sign(n)*Math.sign(s);if(0===r)return[0];const i=[];n=Math.abs(n);for(let e=0;e<n;e++)i.push(r*Math.floor(t.prng()*Math.abs(s)+.9999));return i}),s.values);return 0===n.length&&n.push(0),{values:n}}return{values:[y(s.values)]}}divide_expression(e,t){return I(e,z,this.visit.bind(this),t)}dot_expression(e,t){return this.visit(e.expression,t)}exponential_expression(e,t){return I(e,j,this.visit.bind(this),t)}floor_expression(e,t){return{values:[Math.floor(y(this.visit(e.expression,t).values))]}}minus_expression(e,t){return I(e,Y,this.visit.bind(this),t)}modulus_expression(e,t){return I(e,P,this.visit.bind(this),t)}multiply_expression(e,t){return I(e,D,this.visit.bind(this),t)}negative_number_expression(e,t){return{values:[-y(this.visit(e.expression,t).values)]}}parenthesis_expression(e,t){return this.visit(e.expression,t)}real_number_expression(e,t){if(e.right_hand){const s=this.visit(e.right_hand,t),n=s.values.length,r=y(s.values)/10**n;return e.left_hand?{values:[y(this.visit(e.left_hand,t).values)+r]}:{values:[r]}}return this.visit(e.left_hand,t)}round_expression(e,t){return{values:[Math.round(y(this.visit(e.expression,t).values))]}}whole_number_expression(e){let t=[];const s=e.whole_number.length;for(let n in e.whole_number)t.push(this.visit(e.whole_number[n])*10**(s-1-n));return{values:t}}whole_number(e){const t=Object.keys(e)[0];return this.visit(e[t])}whole_number_zero(){return 0}whole_number_one(){return 1}whole_number_two(){return 2}whole_number_three(){return 3}whole_number_four(){return 4}whole_number_five(){return 5}whole_number_six(){return 6}whole_number_seven(){return 7}whole_number_eight(){return 8}whole_number_nine(){return 9}variable_expression(e,t){return{values:[t.variables.get(e.string[0].image)||0]}}}new Interpreter(Math.random);return class Dice{constructor(){this.interpreter=new Interpreter,this.parser=N()}roll(e,{prng:t,variables:s}={}){const n=g.tokenize(e);if(n.errors.length>0){const t=n.errors[0].offset;throw new Error(`Unexpected character "${e.charAt(t)}" at position: ${t}`)}t||(t=Math.random),s||(s=[]);const r=new Map;s.forEach((e=>{r.set(e[0].toLowerCase(),e[1])})),this.parser.input=n.tokens;const i=this.parser.expression();return this.interpreter.visit(i,{prng:t,variables:r})}}}));
//# sourceMappingURL=Dice.umd.js.map
