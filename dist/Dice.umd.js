/*!
Copyright (C) 2022 REVTTS, Ronald M Zielaznicki

This file is part of REVTTS Dice.

REVTTS Dice is free software: you can redistribute it and/or modify it under the terms of
the GNU General Public License as published by the Free Software Foundation, either
version 3 of the License, or any later version.

REVTTS Dice is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with REVTTS Dice.
If not, see <https://www.gnu.org/licenses/>. 
*/
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t(require("chevrotain")):"function"==typeof define&&define.amd?define(["chevrotain"],t):(e="undefined"!=typeof globalThis?globalThis:e||self).Dice=t(e.chevrotain)}(this,(function(e){"use strict";e.createToken({name:"bracket_angle_close",pattern:/>/}),e.createToken({name:"bracket_angle_open",pattern:/</});const t=e.createToken({name:"bracket_curley_close",pattern:/\}/}),r=e.createToken({name:"bracket_curley_open",pattern:/\{/}),s=e.createToken({name:"bracket_round_close",pattern:/\)/}),n=e.createToken({name:"bracket_round_open",pattern:/\(/});e.createToken({name:"bracket_square_close",pattern:/\]/}),e.createToken({name:"bracket_square_open",pattern:/\[/});const i=e.createToken({name:"abs",pattern:/abs/}),o=e.createToken({name:"ceil",pattern:/ceil/}),h=e.createToken({name:"d",pattern:/[dD]/}),a=e.createToken({name:"alt_die",pattern:/.die/}),_=e.createToken({name:"divide",pattern:/\//}),u=e.createToken({name:"dot",pattern:/\./}),p=e.createToken({name:"exponent",pattern:/\*\*/}),L=e.createToken({name:"floor",pattern:/floor/}),l=e.createToken({name:"modulus",pattern:/%/}),m=e.createToken({name:"minus",pattern:/-/}),E=e.createToken({name:"multiply",pattern:/\*/}),U=e.createToken({name:"plus",pattern:/\+/}),c=e.createToken({name:"round",pattern:/round/});var d=Object.freeze({__proto__:null,token_operator_absolute:i,token_operator_ceil:o,token_operator_die:h,token_operator_alt_die:a,token_operator_divide:_,token_operator_dot:u,token_operator_exponent:p,token_operator_floor:L,token_operator_modulus:l,token_operator_minus:m,token_operator_multiply:E,token_operator_plus:U,token_operator_round:c});const b=e.createToken({name:"string",pattern:/[a-zA-Z]+/}),x=e.createToken({name:"number_zero",pattern:/0/}),B=e.createToken({name:"number_one",pattern:/1/}),f=e.createToken({name:"number_two",pattern:/2/}),A=e.createToken({name:"number_three",pattern:/3/}),R=e.createToken({name:"number_four",pattern:/4/}),S=e.createToken({name:"number_five",pattern:/5/}),v=e.createToken({name:"number_six",pattern:/6/}),k=e.createToken({name:"number_seven",pattern:/7/}),T=e.createToken({name:"number_eight",pattern:/8/}),w=e.createToken({name:"number_nine",pattern:/9/});var M=Object.freeze({__proto__:null,token_number_zero:x,token_number_one:B,token_number_two:f,token_number_three:A,token_number_four:R,token_number_five:S,token_number_six:v,token_number_seven:k,token_number_eight:T,token_number_nine:w});e.createToken({name:"whitespace",pattern:/\s/});const g=e.createToken({group:e.Lexer.SKIPPED,name:"whitespace",pattern:/\s/}),O=[r,t,s,n,...Object.values(d),...Object.values(M),g,b];var N=new e.Lexer(O);class Parser extends e.CstParser{constructor(e){super(e),this.RULE("expression",(()=>{this.SUBRULE(this.minus_expression,{LABEL:"expression"})})),this.RULE("absolute_expression",(()=>{this.CONSUME(i,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("addition_expression",(()=>{this.SUBRULE(this.modulus_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(U,{LABEL:"operator"}),this.SUBRULE2(this.modulus_expression,{LABEL:"right_hand"})}))})),this.RULE("atomic_expression",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.absolute_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.ceil_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.floor_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.negative_number_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.round_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.variable_expression,{LABEL:"expression"})},{ALT:()=>this.SUBRULE(this.whole_number_expression,{LABEL:"expression"})}])})),this.RULE("ceil_expression",(()=>{this.CONSUME(o,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("die_expression",(()=>{this.SUBRULE(this.real_number_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.OR([{ALT:()=>{this.CONSUME(h,{LABEL:"operator"}),this.SUBRULE2(this.real_number_expression,{LABEL:"right_hand"})}},{ALT:()=>{this.CONSUME(a,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"right_hand"})}}])}))})),this.RULE("divide_expression",(()=>{this.SUBRULE(this.multiply_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(_,{LABEL:"operator"}),this.SUBRULE2(this.multiply_expression,{LABEL:"right_hand"})}))})),this.RULE("exponential_expression",(()=>{this.SUBRULE(this.die_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(p,{LABEL:"operator"}),this.SUBRULE2(this.die_expression,{LABEL:"right_hand"})}))})),this.RULE("floor_expression",(()=>{this.CONSUME(L,{LABEL:"operator"}),this.SUBRULE2(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("minus_expression",(()=>{this.SUBRULE(this.addition_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(m,{LABEL:"operator"}),this.SUBRULE2(this.addition_expression,{LABEL:"right_hand"})}))})),this.RULE("modulus_expression",(()=>{this.SUBRULE(this.divide_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(l,{LABEL:"operator"}),this.SUBRULE2(this.divide_expression,{LABEL:"right_hand"})}))})),this.RULE("multiply_expression",(()=>{this.SUBRULE(this.exponential_expression,{LABEL:"left_hand"}),this.MANY((()=>{this.CONSUME(E,{LABEL:"operator"}),this.SUBRULE2(this.exponential_expression,{LABEL:"right_hand"})}))})),this.RULE("negative_number_expression",(()=>{this.CONSUME(m),this.SUBRULE(this.expression)})),this.RULE("parenthesis_expression",(()=>{this.CONSUME(n),this.SUBRULE(this.expression,{LABEL:"expression"}),this.CONSUME(s)})),this.RULE("real_number_expression",(()=>{this.OR([{ALT:()=>{this.SUBRULE(this.atomic_expression,{LABEL:"left_hand"}),this.OPTION((()=>{this.CONSUME(u,{LABEL:"operator"}),this.SUBRULE2(this.atomic_expression,{LABEL:"right_hand"})}))}},{ALT:()=>{this.CONSUME2(u,{LABEL:"operator"}),this.SUBRULE3(this.atomic_expression,{LABEL:"right_hand"})}}])})),this.RULE("round_expression",(()=>{this.CONSUME(c,{LABEL:"operator"}),this.SUBRULE(this.parenthesis_expression,{LABEL:"expression"})})),this.RULE("whole_number_expression",(()=>{this.AT_LEAST_ONE((()=>{this.SUBRULE(this.whole_number)}))})),this.RULE("whole_number",(()=>{this.OR([{ALT:()=>this.SUBRULE(this.whole_number_zero)},{ALT:()=>this.SUBRULE(this.whole_number_one)},{ALT:()=>this.SUBRULE(this.whole_number_two)},{ALT:()=>this.SUBRULE(this.whole_number_three)},{ALT:()=>this.SUBRULE(this.whole_number_four)},{ALT:()=>this.SUBRULE(this.whole_number_five)},{ALT:()=>this.SUBRULE(this.whole_number_six)},{ALT:()=>this.SUBRULE(this.whole_number_seven)},{ALT:()=>this.SUBRULE(this.whole_number_eight)},{ALT:()=>this.SUBRULE(this.whole_number_nine)}])})),this.RULE("whole_number_zero",(()=>{this.CONSUME(x)})),this.RULE("whole_number_one",(()=>{this.CONSUME(B)})),this.RULE("whole_number_two",(()=>{this.CONSUME(f)})),this.RULE("whole_number_three",(()=>{this.CONSUME(A)})),this.RULE("whole_number_four",(()=>{this.CONSUME(R)})),this.RULE("whole_number_five",(()=>{this.CONSUME(S)})),this.RULE("whole_number_six",(()=>{this.CONSUME(v)})),this.RULE("whole_number_seven",(()=>{this.CONSUME(k)})),this.RULE("whole_number_eight",(()=>{this.CONSUME(T)})),this.RULE("whole_number_nine",(()=>{this.CONSUME(w)})),this.RULE("variable_expression",(()=>{this.CONSUME(r),this.CONSUME(b),this.CONSUME(t)})),this.performSelfAnalysis()}}const C=()=>new Parser([r,t,s,n,...Object.values(d),...Object.values(M),b]);const $=C().getBaseCstVisitorConstructorWithDefaults(),y=(e,t)=>{const r=e.shift(),s=e.shift(),n=Array.from(Array(Math.max(r.length,s.length)),((e,n)=>{const i=r[n]||r[r.length-1],o=s[n]||s[s.length-1];return`${i}${t}${o}`}));return e.length>0?y([n,...e],t):n};function j(e,t,r,s,n){const i=s(e.expression,n),o=r(z(i.values));return{outputs:[...i.outputs.map((e=>t(e))),n.formatter.format_result(`${o}`)],values:[o]}}const z=e=>e.reduce(((e,t)=>e+t)),Y=e=>e.reduce(((e,t)=>e/t)),P=e=>e.reduce(((e,t)=>e**t)),D=e=>e.reduce(((e,t)=>e-t)),I=e=>e.reduce(((e,t)=>e%t)),q=e=>e.reduce(((e,t)=>e*t));function F(e,t,r,s,n){let i=s(e.left_hand,n);if(e.right_hand){const o=e.right_hand.map((e=>s(e,n))),h=o.map((e=>e.outputs)),a=o.map((e=>z(e.values))),_=r([z(i.values),...a]);return{outputs:[...y([i.outputs,...h],t),n.formatter.format_result(`${_}`)],values:[_]}}return i}class Interpreter extends ${constructor(){super(),this.validateVisitor()}expression(e,t){return this.visit(e.expression,t)}absolute_expression(e,t){return j(e,(e=>`abs(${e})`),Math.abs,this.visit.bind(this),t)}addition_expression(e,t){return F(e,"+",z,this.visit.bind(this),t)}atomic_expression(e,t){return this.visit(e.expression,t)}ceil_expression(e,t){return j(e,(e=>`ceil(${e})`),Math.ceil,this.visit.bind(this),t)}die_expression(e,t){const r=this.visit(e.left_hand,t);if(e.right_hand){const s=e.right_hand.map((e=>this.visit(e,t))),n=s.map((e=>e.outputs)),i=s.map((e=>z(e.values))).reduce(((e,r)=>{let s=z(e);const n=Math.sign(s)*Math.sign(r);if(0===n)return[0];const i=[];s=Math.abs(s);for(let e=0;e<s;e++)i.push(n*Math.floor(t.prng()*Math.abs(r)+.9999));return i}),r.values);return 0===i.length&&i.push(0),{outputs:[...y([r.outputs,...n],"d"),i.map((e=>t.formatter.format_dice_result(e))).join(", ")],values:i}}return r}divide_expression(e,t){return F(e,"/",Y,this.visit.bind(this),t)}exponential_expression(e,t){return F(e,"**",P,this.visit.bind(this),t)}floor_expression(e,t){return j(e,(e=>`floor(${e})`),Math.floor,this.visit.bind(this),t)}minus_expression(e,t){return F(e,"-",D,this.visit.bind(this),t)}modulus_expression(e,t){return F(e,"%",I,this.visit.bind(this),t)}multiply_expression(e,t){return F(e,"*",q,this.visit.bind(this),t)}negative_number_expression(e,t){return j(e,(e=>`-${e}`),(e=>-e),this.visit.bind(this),t)}parenthesis_expression(e,t){return this.visit(e.expression,t)}real_number_expression(e,t){if(e.right_hand){const r=this.visit(e.right_hand,t),s=r.values.length,n=z(r.values)/10**s;if(e.left_hand){const s=this.visit(e.left_hand,t),i=z(s.values)+n;return{outputs:[...y([s.outputs,r.outputs],"."),t.formatter.format_result(`${i}`)],values:[i]}}return{outputs:[...r.outputs.map((e=>`.${e}`)),t.formatter.format_result(`${n}`)],values:[n]}}return this.visit(e.left_hand,t)}round_expression(e,t){return j(e,(e=>`round(${e})`),Math.round,this.visit.bind(this),t)}whole_number_expression(e){let t=[];const r=e.whole_number.length;for(let s in e.whole_number)t.push(this.visit(e.whole_number[s])*10**(r-1-s));return{outputs:[`${z(t)}`],values:t}}whole_number(e){const t=Object.keys(e)[0];return this.visit(e[t])}whole_number_zero(){return 0}whole_number_one(){return 1}whole_number_two(){return 2}whole_number_three(){return 3}whole_number_four(){return 4}whole_number_five(){return 5}whole_number_six(){return 6}whole_number_seven(){return 7}whole_number_eight(){return 8}whole_number_nine(){return 9}variable_expression(e,t){const r=t.variables.get(e.string[0].image)||0;return{outputs:[`${r}`],values:[r]}}}new Interpreter(Math.random);class Formatter{constructor(){}format_dice_result(e){return this.format_result(e)}format_result(e){return e}}return class Dice{constructor(){this.interpreter=new Interpreter,this.parser=C()}roll(e,{formatter:t,prng:r,variables:s}={}){const n=N.tokenize(e);if(n.errors.length>0){const t=n.errors[0].offset;throw new Error(`Unexpected character "${e.charAt(t)}" at position: ${t}`)}t||(t=new Formatter),r||(r=Math.random),s||(s=[]);const i=new Map;s.forEach((e=>{i.set(e[0].toLowerCase(),e[1])})),this.parser.input=n.tokens;const o=this.parser.expression();if(this.parser.errors.length>0)throw new Error(this.parser.errors[0]);return this.interpreter.visit(o,{formatter:t,prng:r,variables:i})}}}));
//# sourceMappingURL=Dice.umd.js.map
